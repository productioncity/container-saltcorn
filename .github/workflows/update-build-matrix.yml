#------------------------------------------------------------------------------
# GitHub Actions Workflow - Automated Build-Matrix Refresh
#
# Purpose
#   • Executes `scripts/update_build_matrix.py` once a week (and on-demand).
#   • When the script detects that `.ci/build-matrix.yml` requires changes:
#       1. Commit the regenerated file on a dedicated, unique branch.
#       2. Push the branch to the origin **using PAT_ACTIONS** (so that the
#          subsequent container-build workflow is NOT suppressed).
#       3. Open (or re-open) a Pull-Request with a detailed description
#          (author = PAT_ACTIONS user, not github-actions[bot]).
#       4. Approve the PR with the default `GITHUB_TOKEN`
#          (reviewer ≠ author → satisfies no-self-approval rule).
#       5. WAIT until all required status checks succeed.
#       6. Enable GitHub’s native Auto-Merge (merge-commit, delete branch).
#
# Notes
#   • Only first-party/core actions are used; all other logic is scripted.
#   • Approval/merge operations are authenticated via PAT_ACTIONS so they
#     satisfy branch-protection rules, yet the PR itself is authored by the
#     PAT user, avoiding the “self-approval” ban.
#
# ──────────────────────────────────────────────────────────────────────────────
# Author : Troy Kelly <troy@team.production.city>
# History:
#   2025-05-01 • Initial implementation
#   2025-05-01 • Fix: remove unsupported “--json/--jq” flags from
#                   “gh pr create” (compatibility with older GitHub CLI)
#   2025-05-02 • Scope PAT usage to avoid self-approval failure
#   2025-05-03 • Push branch with PAT + wait for status checks before merge
#   2025-05-04 • Swap tokens: PR authored by PAT, approval by GITHUB_TOKEN
#------------------------------------------------------------------------------

name: Refresh Build Matrix

on:
  # Weekly at 23:05 UTC every Monday
  schedule:
    - cron: '5 23 * * 1'
  # Manual button in the Actions UI
  workflow_dispatch:

# Repository-wide default permissions.
permissions:
  contents: write         # commit + push
  pull-requests: write    # open / approve / merge PRs

jobs:
  update-matrix:
    name: Update build-matrix file & raise PR
    runs-on: ubuntu-latest

    # Environment variables shared across all steps
    env:
      PYTHON_VERSION: '3.12'
      # Stored PAT used only for push/approve/merge - NOT exported as GH_TOKEN
      PAT_ACTIONS: ${{ secrets.PAT_ACTIONS }}

    steps:
      #-------------------------------------------------------------------#
      # 0. Checkout the repository
      #-------------------------------------------------------------------#
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch full history so `gh` can resolve branch/PR relationships.
          fetch-depth: 0

      #-------------------------------------------------------------------#
      # 1. Prepare Python runtime (PyYAML is required by the script)
      #-------------------------------------------------------------------#
      - name: 🐍 Set-up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install script runtime dependencies
        run: pip install --upgrade --quiet pyyaml

      #-------------------------------------------------------------------#
      # 2. Dry-run the matrix-update script to detect pending changes
      #-------------------------------------------------------------------#
      - name: 🔍 Evaluate whether the matrix needs updating (dry-run)
        id: check
        shell: bash
        run: |
          set -euo pipefail

          set +e
          python scripts/update_build_matrix.py --dry-run
          rc=$?
          set -e

          case "$rc" in
            0)  echo "changed=false" >>"$GITHUB_OUTPUT" ;;
            2)  echo "changed=true"  >>"$GITHUB_OUTPUT" ;;
            *)  echo "❌ update_build_matrix.py failed (rc=${rc})" >&2
                exit "$rc"
                ;;
          esac

      - name: ✅ Matrix already up-to-date - nothing to do
        if: steps.check.outputs.changed == 'false'
        run: echo "Exiting - no changes required."

      #-------------------------------------------------------------------#
      # 3. Apply the update & commit to a dedicated branch
      #-------------------------------------------------------------------#
      - name: 🛠️ Regenerate matrix file
        if: steps.check.outputs.changed == 'true'
        run: python scripts/update_build_matrix.py

      - name: 🗃️ Commit & push changes to new branch (via PAT)
        if: steps.check.outputs.changed == 'true'
        id: commit
        env:
          GIT_AUTHOR_NAME: matrix-bot
          GIT_AUTHOR_EMAIL: matrix-bot@users.noreply.github.com
          GIT_COMMITTER_NAME: matrix-bot
          GIT_COMMITTER_EMAIL: matrix-bot@users.noreply.github.com
        shell: bash
        run: |
          set -euo pipefail
          branch="ci/update-build-matrix-$(date -u +%Y%m%d%H%M%S)"
          git switch -c "$branch"
          git add .ci/build-matrix.yml
          git commit -m "ci(matrix): refresh build matrix automatically"

          # Push with PAT so downstream workflows are not suppressed
          git remote set-url origin \
            "https://x-access-token:${PAT_ACTIONS}@github.com/${{ github.repository }}.git"
          git push --set-upstream origin "$branch"
          echo "branch=$branch" >>"$GITHUB_OUTPUT"

      #-------------------------------------------------------------------#
      # 4. Install GitHub CLI (official Debian package)
      #-------------------------------------------------------------------#
      - name: 🧰 Install GitHub CLI
        if: steps.check.outputs.changed == 'true'
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y gh

      #-------------------------------------------------------------------#
      # 5. Open or update the Pull-Request
      #    (Author = PAT user → workflows allowed on PR events)
      #-------------------------------------------------------------------#
      - name: 📨 Create / update Pull Request
        if: steps.check.outputs.changed == 'true'
        id: pr
        env:
          GH_TOKEN: ${{ env.PAT_ACTIONS }}   # ⬅️ PAT opens/updates PR
        shell: bash
        run: |
          set -euo pipefail

          branch="${{ steps.commit.outputs.branch }}"
          title="ci: Refresh Saltcorn build matrix ($(date -u +%Y-%m-%d))"

          body=$(cat <<'EOF'
          ## 🤖 Automated Build-Matrix Refresh
          This pull-request was generated by the **Refresh Build Matrix** workflow.
          It updates `.ci/build-matrix.yml` so the container build pipeline tracks
          the most recent Saltcorn releases.
          EOF
          )

          if gh pr view "$branch" >/dev/null 2>&1; then
            number=$(gh pr view "$branch" --json number --jq '.number')
            gh pr edit "$number" --title "$title" --body "$body"
          else
            gh pr create --base main --head "$branch" \
                         --title "$title" --body "$body" \
                         --label "automation,build-matrix"
            number=$(gh pr view "$branch" --json number --jq '.number')
          fi
          echo "number=${number}" >>"$GITHUB_OUTPUT"

      #-------------------------------------------------------------------#
      # 6. Approve the PR (reviewer = github-actions[bot] ≠ author)
      #-------------------------------------------------------------------#
      - name: ✔️ Approve Pull Request
        if: steps.check.outputs.changed == 'true'
        env:
          GH_TOKEN: ${{ github.token }}      # ⬅️ approval via default token
        run: |
          gh pr review "${{ steps.pr.outputs.number }}" \
            --approve \
            --body "Automated approval by CI workflow."

      #-------------------------------------------------------------------#
      # 7. Enable auto-merge (merge-commit; branch deleted)
      #-------------------------------------------------------------------#
      - name: 🔀 Enable auto-merge
        if: steps.check.outputs.changed == 'true'
        env:
          GH_TOKEN: ${{ env.PAT_ACTIONS }}
        run: |
          gh pr merge "${{ steps.pr.outputs.number }}" \
            --auto \
            --merge \
            --delete-branch \
            --squash=false   # keep real merge commit