#------------------------------------------------------------------------------
# GitHub Actions Workflow – Build, Sign & Publish Saltcorn OCI Images
#
# • Builds every Node × Saltcorn permutation defined in `.ci/build-matrix.yml`.
# • Publishes images to GHCR **and** signs them with Sigstore cosign
#   (key-less/OIDC) to guarantee supply-chain provenance.
# • Automatically updates the README build-matrix table on successful pushes.
#
# ──────────────────────────────────────────────────────────────────────────────
# Author:  Troy Kelly <troy@team.production.city>
# History:
#   2025-04-30 • Initial scaffold
#   2025-04-30 • Add cosign signing & verification (key-less)
#------------------------------------------------------------------------------

name: Build, Sign & Publish Saltcorn Containers

on:
  push:
    branches: [ main ]
    paths:
      - 'containers/**'
      - '.ci/build-matrix.yml'
      - '.ci/build-matrix.yaml'
  pull_request:
    branches: [ main ]
    paths:
      - 'containers/**'
      - '.ci/build-matrix.yml'
      - '.ci/build-matrix.yaml'
  workflow_dispatch:
  # Weekly at At 00:05 UTC every Tuesday
  schedule:
    - cron: '5 00 * * 2'

#------------------------------------------------------------------------------
#  Repository-wide default permissions.
#  NOTE: id-token:write is required for key-less cosign signing.
#------------------------------------------------------------------------------
permissions:
  contents: read
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/saltcorn

# ──────────────────────────────────────────────────────────────────────────────
# 1. Read .ci/build-matrix.yml and expose arrays + defaults
# ──────────────────────────────────────────────────────────────────────────────
jobs:

  matrix:
    name: Generate build matrix
    runs-on: ubuntu-latest

    outputs:
      nodes:        ${{ steps.generate.outputs.nodes }}
      saltcorns:    ${{ steps.generate.outputs.saltcorns }}
      default_node: ${{ steps.generate.outputs.default_node }}
      default_sc:   ${{ steps.generate.outputs.default_sc }}
      edge_sc:      ${{ steps.generate.outputs.edge_sc }}

    steps:
      - uses: actions/checkout@v4

      #─────────────────────────────────────────────────────────────────────────
      # Install yq (pinned) – YAML parser for Bash
      #─────────────────────────────────────────────────────────────────────────
      - name: 🛠️  Install yq
        run: |
          set -euo pipefail
          YQ_VERSION="v4.45.1"
          SHA256="654d2943ca1d3be2024089eb4f270f4070f491a0610481d128509b2834870049"
          wget -q https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64 -O yq
          echo "${SHA256}  yq" | sha256sum -c -
          sudo mv yq /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

      - name: 🔄  Parse YAML & emit outputs
        id: generate
        shell: bash
        run: |
          set -euo pipefail
          CONFIG=".ci/build-matrix.yml"

          default_node=$(yq '.node.default'   < "$CONFIG")
          default_sc=$(yq '.saltcorn.default' < "$CONFIG")
          edge_sc=$(yq '.saltcorn.edge'       < "$CONFIG")

          nodes_json=$(yq -o=json '.node.versions'     "$CONFIG" | jq -c '.')
          sc_json=$(yq    -o=json '.saltcorn.versions' "$CONFIG" | jq -c '.')

          echo "📝 Node  versions : $nodes_json"
          echo "📝 Saltcorn vers. : $sc_json"

          {
            echo "default_node=${default_node}"
            echo "default_sc=${default_sc}"
            echo "edge_sc=${edge_sc}"
            echo "nodes<<EOF"
            echo "$nodes_json"
            echo "EOF"
            echo "saltcorns<<EOF"
            echo "$sc_json"
            echo "EOF"
          } >>"$GITHUB_OUTPUT"

# ──────────────────────────────────────────────────────────────────────────────
# 2. Build, sign (cosign) & optionally push image for every permutation
# ──────────────────────────────────────────────────────────────────────────────
  build:
    name: Build, Sign & Push
    needs: matrix
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write          # required for key-less sigstore signing
    strategy:
      fail-fast: false
      matrix:
        node:      ${{ fromJson(needs.matrix.outputs.nodes) }}
        saltcorn:  ${{ fromJson(needs.matrix.outputs.saltcorns) }}

    steps:
      - uses: actions/checkout@v4

      #─────────────────────────────────────────────────────────────────────────
      # Runner preparation
      #─────────────────────────────────────────────────────────────────────────
      - name: 🏗️  Set-up QEMU
        uses: docker/setup-qemu-action@v3

      - name: 🏗️  Set-up Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: env.BUILDKIT_INLINE_CACHE=1

      #─────────────────────────────────────────────────────────────────────────
      # Registry authentication (skipped on PR builds)
      #─────────────────────────────────────────────────────────────────────────
      - name: 🔐  Log-in to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      #─────────────────────────────────────────────────────────────────────────
      # Metadata helpers
      #─────────────────────────────────────────────────────────────────────────
      - name: ℹ️  Timestamp label
        id: meta
        run: echo "created=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >>"$GITHUB_OUTPUT"

      - name: 🏷️  Calculate tags
        id: tags
        run: |
          set -euo pipefail
          list=$(./scripts/calc-tags.sh \
            "${{ matrix.node }}" \
            "${{ matrix.saltcorn }}" \
            "${{ needs.matrix.outputs.default_node }}" \
            "${{ needs.matrix.outputs.default_sc }}" \
            "${{ needs.matrix.outputs.edge_sc }}")
          printf '%s\n' "$list"
          { echo 'list<<EOF'; printf '%s\n' "$list"; echo 'EOF'; } >>"$GITHUB_OUTPUT"

      #─────────────────────────────────────────────────────────────────────────
      # Build & push image
      #─────────────────────────────────────────────────────────────────────────
      - name: 🐳  Build & push image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: containers/Dockerfile.saltcorn
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          cache-from: type=gha,scope=${{ matrix.node }}-${{ matrix.saltcorn }}
          cache-to:   type=gha,mode=max,scope=${{ matrix.node }}-${{ matrix.saltcorn }}
          tags: ${{ steps.tags.outputs.list }}
          build-args: |
            NODE_BASE=${{ matrix.node }}
            SALTCORN_VERSION=${{ matrix.saltcorn }}
          labels: |
            org.opencontainers.image.title=Saltcorn
            org.opencontainers.image.description=Saltcorn – Low-code platform packaged by Production City
            org.opencontainers.image.version=${{ matrix.saltcorn }}
            org.opencontainers.image.url=https://saltcorn.com/
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.created=${{ steps.meta.outputs.created }}
            org.opencontainers.image.authors=Troy Kelly <troy@team.production.city>
            org.opencontainers.image.vendor=Production City
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/${{ github.sha }}/README.md
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.ref.name=${{ github.ref }}
            org.opencontainers.image.base.name=node:${{ matrix.node }}
            # Legacy label-schema
            org.label-schema.name=Saltcorn
            org.label-schema.vcs-url=https://github.com/${{ github.repository }}
            org.label-schema.vcs-ref=${{ github.sha }}
            org.label-schema.schema-version=1.0
          provenance: true
          sbom: true

      #─────────────────────────────────────────────────────────────────────────
      # Install cosign (pinned) – for signing & verification
      #─────────────────────────────────────────────────────────────────────────
      - name: 🔏  Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.5.0
        with:
          cosign-release: 'v2.2.4'

      #─────────────────────────────────────────────────────────────────────────
      # Sign every produced tag using key-less OIDC flow
      #─────────────────────────────────────────────────────────────────────────
      - name: ✍️  Sign image (key-less OIDC)
        if: github.event_name != 'pull_request'
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          set -euo pipefail
          digest="${{ steps.docker_build.outputs.digest }}"
          echo "🔏  Signing tags with digest ${digest}"
          while read -r tag; do
            echo "   • ${tag}"
            cosign sign --yes "${tag}@${digest}"
          done <<< "${{ steps.tags.outputs.list }}"

      #─────────────────────────────────────────────────────────────────────────
      # Verify the freshly‐signed image – fails build if signature invalid
      #─────────────────────────────────────────────────────────────────────────
      - name: ✅  Verify image signature
        if: github.event_name != 'pull_request'
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          set -euo pipefail
          digest="${{ steps.docker_build.outputs.digest }}"
          echo "🔎  Verifying signatures"
          identity="https://github.com/${{ github.repository }}/.github/workflows/build-containers.yml@${{ github.ref }}"
          issuer="https://token.actions.githubusercontent.com"
          while read -r tag; do
            echo "   • ${tag}"
            cosign verify \
              --certificate-identity "${identity}" \
              --certificate-oidc-issuer "${issuer}" \
              "${tag}@${digest}"
          done <<< "${{ steps.tags.outputs.list }}"

# ──────────────────────────────────────────────────────────────────────────────
# 3. Post-build README update (push events only)
# ──────────────────────────────────────────────────────────────────────────────
  update-readme:
    name: Update README with Build Matrix
    needs: [matrix, build]
    if: github.event_name != 'pull_request' && needs.build.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🛠️  Install helper tools (yq, jq)
        run: |
          set -euo pipefail
          YQ_VERSION="v4.45.1"
          SHA256="654d2943ca1d3be2024089eb4f270f4070f491a0610481d128509b2834870049"
          wget -q https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64 -O yq
          echo "${SHA256}  yq" | sha256sum -c -
          sudo mv yq /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

      - name: 🔄  Generate build matrix table
        id: table
        run: |
          set -euo pipefail
          CONFIG=".ci/build-matrix.yml"
          REGISTRY="${REGISTRY:-ghcr.io}"
          IMAGE_NAME="${IMAGE_NAME:-${GITHUB_REPOSITORY_OWNER}/saltcorn}"
          nodes=($(yq '.node.versions[]' < "$CONFIG"))
          scs=($(yq '.saltcorn.versions[]' < "$CONFIG"))
          {
            echo "| Node Version | Saltcorn Version | Docker Pull | Build |"
            echo "|-------------|-----------------|-------------|-------|"
            for n in "${nodes[@]}"; do
              for sc in "${scs[@]}"; do
                tag="${sc}-${n}"
                echo "| ${n} | ${sc} | \`docker pull ${REGISTRY}/${IMAGE_NAME}:${tag}\` | ✅ |"
              done
            done
          } > build_matrix_table.md

      - name: 🖊️  Insert or update table in README.md
        run: |
          set -euo pipefail
          TABLE_CONTENT=$(cat build_matrix_table.md)
          if grep -q "## 🧪 Tested Build Matrix" README.md; then
            # Replace existing section
            awk -v table="$TABLE_CONTENT" '
              BEGIN {in_section=0}
              /^## 🧪 Tested Build Matrix/ {print; print table; in_section=1; next}
              in_section && /^## / {in_section=0}
              !in_section {print}
            ' README.md > README.tmp
          else
            # Insert new section after the first "---" delimiter
            awk -v table="$TABLE_CONTENT" '
              {print}
              /^---$/ && !added {print ""; print "## 🧪 Tested Build Matrix"; print table; added=1}
            ' README.md > README.tmp
          fi
          mv README.tmp README.md

      - name: 📤 Commit README update
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          if ! git diff --quiet; then
            git add README.md
            git commit -m "docs(readme): update tested build matrix table [skip ci]"
            git push
          else
            echo "ℹ️  No README changes detected."
          fi