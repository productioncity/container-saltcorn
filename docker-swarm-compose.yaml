services:
  saltcorn:
    image: ghcr.io/productioncity/saltcorn:latest
    restart: unless-stopped
    networks:
      - proxy
      - backend
    environment:
      - TZ=${TZ:-Australia/Sydney}
      - PGHOST=postgres-${APP_SITE}
      - PGPORT=${POSTGRES_PORT:-5432}
      - PGDATABASE=${POSTGRES_DB}
      - PGUSER=${POSTGRES_USER}
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - SALTCORN_MULTI_TENANT=${SALT_MULTI_TENANT:-true}
      - SALTCORN_SESSION_SECRET=${APP_KEY}
      - SALTCORN_FILE_STORE=${APP_FILE_STORE:-/filestore}
    volumes:
      - "/etc/timezone:/etc/timezone:ro"
      - filestore:/filestore
      - saltcorn-backup:/backup
    command: "serve"
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=0
    deploy:
      replicas: 1
      endpoint_mode: dnsrr
      placement:
        max_replicas_per_node: 1
        constraints:
          - node.role==worker
      update_config:
        parallelism: 1
        delay: 10s
      resources:
        limits:
          cpus: "6.00"
          memory: 4G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      labels:
        - traefik.enable=true
        - traefik.swarm.network=proxy
        - traefik.constraint-label=traefik-public
        #----------------------------------------------- routers for: saltcorn --------------------------------------------------
        # http
        - traefik.http.routers.${APP_SITE}-http.rule=(Host(`${APP_DOMAIN}`) || HostRegexp(`^.+\.${APP_DOMAIN}$$`)) && !Host(`postgres.${APP_DOMAIN}`) && !Host(`pgadmin.${APP_DOMAIN}`) && !Host(`redis.${APP_DOMAIN}`)
        - traefik.http.routers.${APP_SITE}-http.entrypoints=http
        - traefik.http.routers.${APP_SITE}-http.middlewares=servicests,block-apple,https-redirect,reporturi
        - traefik.http.routers.${APP_SITE}-http.service=${APP_SITE}
        # https
        - traefik.http.routers.${APP_SITE}-https.rule=(Host(`${APP_DOMAIN}`) || HostRegexp(`^.+\.${APP_DOMAIN}$$`)) && !Host(`postgres.${APP_DOMAIN}`) && !Host(`pgadmin.${APP_DOMAIN}`) && !Host(`redis.${APP_DOMAIN}`)
        - traefik.http.routers.${APP_SITE}-https.tls.domains[0].main=${APP_DOMAIN}
        - traefik.http.routers.${APP_SITE}-https.tls.domains[0].sans=*.${APP_DOMAIN}
        - traefik.http.routers.${APP_SITE}-https.entrypoints=http3
        - traefik.http.routers.${APP_SITE}-https.service=${APP_SITE}
        - traefik.http.routers.${APP_SITE}-https.tls.certresolver=${APP_SITE_RESOLVER}
        - traefik.http.routers.${APP_SITE}-https.middlewares=gzip,limit,reporturi,block-apple
        #====================================================== services ===========================================================
        - traefik.http.services.${APP_SITE}.loadbalancer.server.port=${APP_PORT:-3000}
    healthcheck:
      test:
        - CMD
        - python3
        - -c
        - |
          import os, sys, http.client
          port = int(os.getenv('APP_PORT', '3000'))
          try:
              conn = http.client.HTTPConnection('127.0.0.1', port, timeout=3)
              conn.request('GET', '/')
              ok = 200 <= conn.getresponse().status < 400
              sys.exit(0 if ok else 1)
          except Exception:
              sys.exit(1)
      interval: 30s # run every 30 s
      timeout: 5s # fail if no response in 5 s
      start_period: 300s # give Saltcorn a moment to boot
      retries: 3 # marked unhealthy after 3 consecutive failures

  postgres:
    image: postgis/postgis:${POSTGRES_MAJOR_VERSION:-17}-${POSTGRES_MINOR_VERSION:-3}.${POSTGRES_PATCH_VERSION:-5}
    hostname: "postgres-${APP_SITE}"
    networks:
      - backend
      - proxy
    stop_grace_period: 600s
    deploy:
      replicas: 1
      endpoint_mode: dnsrr
      placement:
        max_replicas_per_node: 1
        constraints:
          - node.role==worker
      rollback_config:
        parallelism: 2
        delay: 120s
        failure_action: continue
        monitor: 60s
        order: stop-first
      update_config:
        parallelism: 2
        delay: 10s
        failure_action: rollback
        monitor: 60s
        order: stop-first
      resources:
        limits:
          cpus: "6.00"
          memory: 2G
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER:-saltcorn}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_INITDB_ARGS=--set=shared_preload_libraries='pg_cron,timescaledb' --set=cron.database_name=${POSTGRES_DB}
      - PGDATA=/var/lib/postgresql/data/pgdata
      - PGADMIN=/var/lib/postgresql/data/pgadmin
      - PGPASSFILE=/root/.pgpass
      - POSTGRES_SYNCHRONOUS_COMMIT=on
      - TZ=${TZ:-Australia/Sydney}
    entrypoint:
      - "bash"
      - "-c"
      - |
        apt-get update &&
        DEBIAN_FRONTEND=noninteractive apt-get install -y apt-transport-https lsb-release curl postgresql-plpython3-$$PG_MAJOR python3-requests postgresql-$$PG_MAJOR-cron &&
        echo "deb https://packagecloud.io/timescale/timescaledb/debian/ $$(lsb_release -c -s) main" | tee /etc/apt/sources.list.d/timescaledb.list &&
        curl -L https://packagecloud.io/timescale/timescaledb/gpgkey | gpg --dearmor -o /etc/apt/trusted.gpg.d/timescaledb.gpg &&
        apt-get update &&
        DEBIAN_FRONTEND=noninteractive apt-get install -y timescaledb-2-postgresql-$$PG_MAJOR timescaledb-toolkit-postgresql-$$PG_MAJOR &&
        if [ ! -d "$$PGDATA" ] || [ -z "$$(ls -A "$$PGDATA" 2>/dev/null)" ]; then
            echo "Initializing database at $${PGDATA}" &&
            echo "#!/bin/bash
        set -e
        psql -v ON_ERROR_STOP=1 --username \"$$POSTGRES_USER\" --dbname \"$$POSTGRES_DB\" <<-EOSQL
          CREATE EXTENSION IF NOT EXISTS pg_cron;
          GRANT USAGE ON SCHEMA cron TO $$POSTGRES_USER;
          GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA cron TO $$POSTGRES_USER;
        EOSQL" > /docker-entrypoint-initdb.d/50_pgcron.sh
            echo "#!/bin/bash
        set -e
        psql -v ON_ERROR_STOP=1 --username \"$$POSTGRES_USER\" --dbname \"$$POSTGRES_DB\" <<-EOSQL
          CREATE EXTENSION IF NOT EXISTS plpython3u;
        EOSQL" > /docker-entrypoint-initdb.d/51_plpython3.sh &&
            echo "#!/bin/bash
        set -e
        psql -v ON_ERROR_STOP=1 --username \"$$POSTGRES_USER\" --dbname \"$$POSTGRES_DB\" <<-EOSQL
          CREATE EXTENSION IF NOT EXISTS timescaledb;
          CREATE EXTENSION IF NOT EXISTS timescaledb_toolkit;
        EOSQL" > /docker-entrypoint-initdb.d/52_timescaledb.sh &&
            echo "#!/usr/bin/env bash
        set -euo pipefail
        if grep -qE \"^[[:space:]]*shared_preload_libraries[[:space:]]*=.*pg_cron\" \"$${PGDATA}/postgresql.conf\"; then
          :
        elif grep -qE \"^[[:space:]]*shared_preload_libraries[[:space:]]*=\" \"$${PGDATA}/postgresql.conf\"; then
          sed -i -E \"s/^([[:space:]]*shared_preload_libraries[[:space:]]*=[[:space:]]*'[^']*)'/\\1,pg_cron'/\" \"$${PGDATA}/postgresql.conf\"
        else
          echo \"shared_preload_libraries = 'pg_cron'\" >> \"$${PGDATA}/postgresql.conf\"
        fi
        if ! grep -qF \"cron.database_name = '$${POSTGRES_DB}'\" \"$${PGDATA}/postgresql.conf\"; then
          echo \"cron.database_name = '$${POSTGRES_DB}'\" >> \"$${PGDATA}/postgresql.conf\"
        fi" > /docker-entrypoint-initdb.d/80_cron.sh &&
            echo "#!/usr/bin/env bash
        set -euo pipefail
        if ! grep -qE \"^[[:space:]]*timescaledb.last_tuned[[:space:]]*=\" \"$${PGDATA}/postgresql.conf\"; then
          echo \"Running timescaledb tune...\"
          /usr/bin/timescaledb-tune --quiet --yes --conf-path=\"$${PGDATA}/postgresql.conf\"
          echo \"Finished timescaledb tune. Sleeping for 1 minute.\"
          sleep 60
          echo \"Done timescaledb tune.\"
        fi" > /docker-entrypoint-initdb.d/81_timescaledb.sh &&
            chmod +x /docker-entrypoint-initdb.d/50_pgcron.sh /docker-entrypoint-initdb.d/51_plpython3.sh /docker-entrypoint-initdb.d/52_timescaledb.sh /docker-entrypoint-initdb.d/80_cron.sh /docker-entrypoint-initdb.d/81_timescaledb.sh &&
            curl -sSL https://raw.githubusercontent.com/saltcorn/saltcorn/refs/heads/master/deploy/examples/test/docker-entrypoint-initdb.sql -o /docker-entrypoint-initdb.d/20_saltcorn.sql &&
            sed -i -e "s#-- Owner: postgres#-- Owner: $${POSTGRES_USER}#g" -e "s#OWNER TO postgres;#OWNER TO $${POSTGRES_USER};#g" /docker-entrypoint-initdb.d/20_saltcorn.sql
        else
            echo "Database already initialized at $${PGDATA}"
        fi &&
        mkdir -p $$PGADMIN &&
        echo $$POSTGRES_PASSWORD > "$$PGADMIN/$${POSTGRES_DB}.$${POSTGRES_USER}" &&
        echo "{\"Servers\": {\"1\": {\"Name\": \"$${POSTGRES_DB} $$POSTGRES_USER\", \"Group\": \"saltcorn\", \"Host\": \"$$(hostname)\", \"HostAddr\": \"$$(hostname)\", \"Port\": $${POSTGRES_PORT}, \"MaintenanceDB\": \"postgres\", \"Username\": \"$${POSTGRES_USER}\", \"SSLMode\": \"${saltcorn_POSTGRES_SSL_MODE:-disable}\", \"Comment\": \"saltcorn Postgres Server\", \"PassFile\": \"/data/pgadmin/$${POSTGRES_DB}.$${POSTGRES_USER}\", \"Shared\": true, \"SharedUsername\": \"$${POSTGRES_DB}-$$POSTGRES_USER\"}}}" > "$$PGADMIN/servers.json" &&
        chown -R 5050:5050 $${PGADMIN} &&
        chmod 700 $${PGADMIN} &&
        chmod 0600 "$$PGADMIN/$${POSTGRES_DB}.$${POSTGRES_USER}" &&
        echo "Creating pgAdmin data directory at $${PGADMIN}"
        echo 'localhost:5432:*:'$$POSTGRES_USER':'$$POSTGRES_PASSWORD > /root/.pgpass &&
        chown 999 /root/.pgpass &&
        chmod 0600 /root/.pgpass &&
        exec docker-entrypoint.sh postgres
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=0
    volumes:
      - "/etc/timezone:/etc/timezone:ro"
      - postgres:/var/lib/postgresql/data
      - type: tmpfs
        target: "/tmp"
        tmpfs:
          size: 2147483648
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'PGPASSWORD=$${POSTGRES_PASSWORD} pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} && PGPASSWORD=$${POSTGRES_PASSWORD} psql -U $${POSTGRES_USER} -d template_postgis -tAc "SELECT 1 FROM pg_extension WHERE extname=''postgis'';" | grep -q 1 || exit 1',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60m

  postgres-backup:
    image: postgis/postgis:${POSTGRES_MAJOR_VERSION}-${POSTGRES_MINOR_VERSION}.${POSTGRES_PATCH_VERSION}
    networks:
      - backend
    labels:
      - purpose=postgres-backup
      - site=${APP_SITE}
    deploy:
      replicas: 1
      endpoint_mode: dnsrr
      placement:
        max_replicas_per_node: 1
        constraints:
          - node.role==worker
      rollback_config:
        parallelism: 2
        delay: 120s
        failure_action: continue
        monitor: 60s
        order: start-first
      update_config:
        parallelism: 2
        delay: 10s
        failure_action: rollback
        monitor: 60s
        order: start-first
      resources:
        limits:
          cpus: "6.00"
          memory: 1G
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER:-saltcorn}
      - BACKUP_DESTINATION=/backups/dump
      - REMOVE_BEFORE=60
      - TZ=${TZ:-Australia/Sydney}
    command:
      - "bash"
      - "-c"
      - |
        apt-get update &&
        DEBIAN_FRONTEND=noninteractive apt-get install -y postgresql-client &&
        BACKUP_INTERVAL=$${BACKUP_INTERVAL:-12} &&
        WAIT_SECONDS=60 &&
        MAX_TRIES=60 &&
        try=0 &&
        until pg_isready -h postgres -U $${POSTGRES_USER}; do
         if [ $$try -gt $$MAX_TRIES ]; then
           echo "Postgres service did not start within the expected time." && exit 1;
         fi
         sleep $$WAIT_SECONDS && let try+=1;
        done &&
        while true; do
          YEAR=`date +"%Y"` && MONTH=`date +"%B"` && DAY=`date +"%d"` && TIME=`date +"%H%M"` &&
          DESTINATION_PATH=$${BACKUP_DESTINATION:-/backups}/$$YEAR/$$MONTH/$$DAY$$TIME &&
          mkdir -p $$DESTINATION_PATH &&
          BACKUP_FILE=$$DESTINATION_PATH/dump.sql &&
          COMPRESSED_FILE=$$BACKUP_FILE.gz &&
          if PGPASSWORD=$${POSTGRES_PASSWORD} pg_dumpall -U $${POSTGRES_USER} -h postgres --clean --if-exists --inserts --on-conflict-do-nothing --quote-all-identifiers --no-password -f $$BACKUP_FILE; then
            gzip $$BACKUP_FILE &&
            echo "Backup taken at $$YEAR/$$MONTH/$$DAY$$TIME" &&
            echo "To restore this backup, use the following command:" &&
            echo "export PGPASSWORD=[your_password] && gunzip -c $$COMPRESSED_FILE | psql -h localhost -U $${POSTGRES_USER} -d $${POSTGRES_DB}"
          else
            echo "Backup failed at $$YEAR/$$MONTH/$$DAY$$TIME"
          fi &&
          find $${BACKUP_DESTINATION:-/backups}/ -mtime +$${REMOVE_BEFORE:-60} -type f -delete &&
          sleep $${BACKUP_INTERVAL}h;
        done
    volumes:
      - "/etc/timezone:/etc/timezone:ro"
      - postgres:/backups
  pgadmin:
    image: dpage/pgadmin4:latest
    hostname: "pgadmin-${APP_SITE}"
    networks:
      - backend
      - proxy
    environment:
      - PGADMIN_DEFAULT_EMAIL=${POSTGRES_USER:-saltcorn}@pgadmin.${APP_DOMAIN}
      - PGADMIN_DEFAULT_PASSWORD=${POSTGRES_PASSWORD}
      - PGADMIN_DISABLE_POSTFIX=1
      - PGADMIN_CONFIG_PROXY_X_FOR_COUNT=1
      - PGADMIN_CONFIG_PROXY_X_PROTO_COUNT=1
      - PGADMIN_CONFIG_PROXY_X_HOST_COUNT=1
      - PGADMIN_CONFIG_PROXY_X_PORT_COUNT=1
      - PGADMIN_CONFIG_PROXY_X_PREFIX_COUNT=1
      - PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION=True
      - PGADMIN_CONFIG_SESSION_DB_PATH="/data/pgadmin/sessions"
      - PGADMIN_CONFIG_SQLITE_PATH="/data/pgadmin/pgadmin4.db"
      - PGADMIN_SERVER_JSON_FILE="/data/pgadmin/servers.json"
      - PGADMIN_PREFERENCES_JSON_FILE="/data/pgadmin/preferences.json"
      #- PGADMIN_CONFIG_DATA_DIR=/data/pgadmin
      - TZ=${TZ:-Australia/Sydney}
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=0
    deploy:
      replicas: 1
      endpoint_mode: dnsrr
      placement:
        max_replicas_per_node: 1
        constraints:
          - node.role==worker
      rollback_config:
        parallelism: 2
        delay: 120s
        failure_action: continue
        monitor: 60s
        order: start-first
      update_config:
        parallelism: 2
        delay: 10s
        failure_action: rollback
        monitor: 60s
        order: start-first
      resources:
        limits:
          cpus: "2.00"
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      labels:
        - traefik.enable=true
        - traefik.swarm.network=proxy
        - traefik.constraint-label=traefik-public
        #----------------------------------------------- routers for: pgadmin --------------------------------------------------
        # http
        - traefik.http.routers.${APP_SITE}-pgadmin-http.rule=Host(`pgadmin.${APP_DOMAIN}`)
        - traefik.http.routers.${APP_SITE}-pgadmin-http.entrypoints=http
        - traefik.http.routers.${APP_SITE}-pgadmin-http.middlewares=servicests,block-apple,https-redirect,reporturi
        - traefik.http.routers.${APP_SITE}-pgadmin-http.service=noop@internal
        # https
        - traefik.http.routers.${APP_SITE}-pgadmin-https.rule=Host(`pgadmin.${APP_DOMAIN}`)
        - traefik.http.routers.${APP_SITE}-pgadmin-https.entrypoints=http3
        - traefik.http.routers.${APP_SITE}-pgadmin-https.service=${APP_SITE}-pgadmin
        - traefik.http.routers.${APP_SITE}-pgadmin-https.tls.certresolver=${APP_SITE_RESOLVER}
        - traefik.http.routers.${APP_SITE}-pgadmin-https.middlewares=gzip,limit,reporturi,block-apple
        #====================================================== services ===========================================================
        - traefik.http.services.${APP_SITE}-pgadmin.loadbalancer.server.port=80
    volumes:
      - "/etc/timezone:/etc/timezone:ro"
      - postgres:/data:rw
      - type: tmpfs
        target: "/tmp"
        tmpfs:
          size: 262144000

volumes:
  postgres:
    driver: glusterfs
    name: ${GLUSTER_VOLUME_POSTGRES}
  redis-data:
    driver: glusterfs
    name: ${GLUSTER_VOLUME_REDIS}
  saltcorn:
    driver: glusterfs
    name: ${GLUSTER_VOLUME_APP}
  filestore:
    driver: glusterfs
    name: ${GLUSTER_VOLUME_FILESTORE}
  saltcorn-backup:
    driver: glusterfs
    name: ${GLUSTER_VOLUME_BACKUP}

networks:
  proxy:
    name: proxy
    driver: overlay
    external: true
  backend:
    driver: overlay
